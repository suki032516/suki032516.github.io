<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-13T00:39:18+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">YuPengStaticPage</title><subtitle>一个简单的静态网页</subtitle><entry><title type="html">《Java 多线程编程核心技术》学习笔记及总结</title><link href="http://localhost:4000/jekyll/update/2024/03/12/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93.html" rel="alternate" type="text/html" title="《Java 多线程编程核心技术》学习笔记及总结" /><published>2024-03-12T14:56:00+08:00</published><updated>2024-03-12T14:56:00+08:00</updated><id>http://localhost:4000/jekyll/update/2024/03/12/%E3%80%8AJava%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/03/12/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93.html"><![CDATA[<h2 id="第一章--java-多线程技能">第一章 —— Java 多线程技能</h2>

<p>线程技术点：</p>

<ul>
  <li>线程的启动</li>
  <li>如何使线程暂停</li>
  <li>如何使线程停止</li>
  <li>线程的优先级</li>
  <li>线程安全相关问题
<!-- more -->
    <h3 id="进程和线程的概念及多线程的优点">进程和线程的概念及多线程的优点</h3>
  </li>
</ul>

<p>进程：比如我们电脑运行的 QQ.exe 程序，是操作系统管理的基本运行单元</p>

<p>线程：在进程中独立运行的子任务，比如 QQ.exe 进程中就有很多线程在运行，下载文件线程、发送消息线程、语音线程、视频线程等。</p>

<p>多线程优点：我们电脑可以同时操作不同的软件，边听着歌，敲着代码，查看 pdf 文档，浏览网页等，CPU 在这些任务之间不停的切换，切换非常快，所以我们就觉得他们是在同时运行的。</p>

<h3 id="使用多线程">使用多线程</h3>

<h4 id="继承-thread-类">继承 Thread 类</h4>

<p>JDK 源码注释（Thread.java）如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">One</span> <span class="n">is</span> <span class="n">to</span> <span class="n">declare</span> <span class="n">a</span> <span class="kd">class</span> <span class="nc">to</span> <span class="n">be</span> <span class="n">a</span> <span class="nf">subclass</span><span class="o">(</span><span class="n">子类</span><span class="o">)</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">Thread</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;.</span> <span class="nc">This</span> <span class="n">subclass</span> <span class="n">should</span> <span class="n">override</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">run</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">method</span> <span class="n">of</span> <span class="kd">class</span> <span class="err">&lt;</span><span class="nc">code</span><span class="o">&gt;</span><span class="nc">Thread</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;.</span> <span class="nc">An</span> <span class="n">instance</span> <span class="n">of</span> <span class="n">the</span> <span class="n">subclass</span> <span class="n">can</span> <span class="n">then</span> <span class="n">be</span> <span class="n">allocated</span> <span class="n">and</span> <span class="n">started</span><span class="o">.</span> <span class="nc">For</span> <span class="n">example</span><span class="o">,</span> <span class="n">a</span> <span class="n">thread</span> <span class="n">that</span> <span class="n">computes</span> <span class="n">primes</span>
<span class="n">larger</span> <span class="n">than</span> <span class="n">a</span> <span class="n">stated</span> <span class="n">value</span> <span class="n">could</span> <span class="n">be</span> <span class="n">written</span> <span class="n">as</span> <span class="nl">follows:</span>
<span class="c1">//继承 Thread 类</span>
<span class="kd">class</span> <span class="nc">PrimeThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>
         <span class="kt">long</span> <span class="n">minPrime</span><span class="o">;</span>
         <span class="nc">PrimeThread</span><span class="o">(</span><span class="kt">long</span> <span class="n">minPrime</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">.</span><span class="na">minPrime</span> <span class="o">=</span> <span class="n">minPrime</span><span class="o">;</span>
         <span class="o">}</span>

         <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
             <span class="c1">// compute primes larger than minPrime</span>
             <span class="n">重写</span> <span class="nc">Thread</span> <span class="n">类的</span> <span class="n">run</span> <span class="n">方法</span>
          <span class="o">}</span>
     <span class="o">}</span>

<span class="nc">The</span> <span class="n">following</span> <span class="n">code</span> <span class="n">would</span> <span class="n">then</span> <span class="n">create</span> <span class="n">a</span> <span class="n">thread</span> <span class="n">and</span> <span class="n">start</span> <span class="n">it</span> <span class="nl">running:</span>
<span class="c1">//开启线程</span>
    <span class="nc">PrimeThread</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrimeThread</span><span class="o">(</span><span class="mi">143</span><span class="o">);</span>
    <span class="n">p</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>

<h4 id="实现-runnable-接口">实现 Runnable 接口</h4>

<p>JDK 源码注释（Thread.java）如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">The</span> <span class="n">other</span> <span class="n">way</span> <span class="n">to</span> <span class="n">create</span> <span class="n">a</span> <span class="n">thread</span> <span class="n">is</span> <span class="n">to</span> <span class="n">declare</span> <span class="n">a</span> <span class="kd">class</span> <span class="nc">that</span> <span class="kd">implements</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">Runnable</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="kd">interface</span><span class="err">.</span> <span class="nc">That</span> <span class="kd">class</span> <span class="nc">then</span> <span class="kd">implements</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">run</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">method</span><span class="o">.</span> <span class="nc">An</span> <span class="n">instance</span> <span class="n">of</span> <span class="n">the</span> <span class="kd">class</span> <span class="nc">can</span> <span class="n">then</span> <span class="n">be</span> <span class="n">allocated</span><span class="o">,</span> <span class="n">passed</span> <span class="n">as</span> <span class="n">an</span> <span class="n">argument</span> <span class="n">when</span> <span class="n">creating</span>
<span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">Thread</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;,</span> <span class="n">and</span> <span class="n">started</span><span class="o">.</span> <span class="nc">The</span> <span class="n">same</span> <span class="n">example</span> <span class="n">in</span> <span class="k">this</span> <span class="n">other</span> <span class="n">style</span> <span class="n">looks</span> <span class="n">like</span> <span class="n">the</span> <span class="nl">following:</span>
<span class="c1">//实现 Runnable 接口</span>
    <span class="kd">class</span> <span class="nc">PrimeRun</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">minPrime</span><span class="o">;</span>
        <span class="nc">PrimeRun</span><span class="o">(</span><span class="kt">long</span> <span class="n">minPrime</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">minPrime</span> <span class="o">=</span> <span class="n">minPrime</span><span class="o">;</span>
         <span class="o">}</span>

         <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="c1">// compute primes larger than minPrime</span>
            <span class="c1">//重写 run 方法</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="nc">The</span> <span class="n">following</span> <span class="n">code</span> <span class="n">would</span> <span class="n">then</span> <span class="n">create</span> <span class="n">a</span> <span class="n">thread</span> <span class="n">and</span> <span class="n">start</span> <span class="n">it</span> <span class="nl">running:</span>
<span class="c1">//开启线程</span>
     <span class="nc">PrimeRun</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrimeRun</span><span class="o">(</span><span class="mi">143</span><span class="o">);</span>
     <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">p</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="currentthread-方法">currentThread() 方法</h3>

<p>该方法返回代码段正在被哪个线程调用的信息。</p>

<h3 id="isalive-方法">isAlive() 方法</h3>

<p>判断当前线程是否处于活动状态（已经启动但未终止）</p>

<h3 id="sleep-方法">sleep() 方法</h3>

<p>在指定的毫秒数内让当前“正在执行的线程（this.currentThread() 返回的线程）”休眠（暂停执行）。</p>

<h3 id="getid-方法">getId() 方法</h3>

<p>获取线程的唯一标识</p>

<h3 id="停止线程">停止线程</h3>

<p>可以使用 <del>Thread.stop()</del> 方法，但最好不要用，因为这个方法是不安全的，已经弃用作废了。</p>

<p>大多数停止一个线程是使用 Thread.interrupt() 方法</p>

<h4 id="判断线程是否是停止状态">判断线程是否是停止状态</h4>

<ul>
  <li>interrupted()
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//测试当前线程是否已经中断了，这个线程的中断状态会被这个方法清除。</span>
<span class="c1">//换句话说，如果连续两次调用了这个方法，第二次调用的时候将会返回 false ，</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">interrupted</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">currentThread</span><span class="o">().</span><span class="na">isInterrupted</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>isInterrupted()</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="c1">//测试线程是否已经中断了，线程的状态不会受这个方法的影响</span>
        <span class="c1">//线程中断被忽略，因为线程处于中断下不处于活动状态的线程由此返回false的方法反映出来</span>
         <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isInterrupted</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nf">isInterrupted</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="cm">/**
     * Tests if some Thread has been interrupted.  The interrupted state
     * is reset or not based on the value of ClearInterrupted that is
     * passed.
     */</span>
     <span class="kd">private</span> <span class="kd">native</span> <span class="kt">boolean</span> <span class="nf">isInterrupted</span><span class="o">(</span><span class="kt">boolean</span> <span class="nc">ClearInterrupted</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="在沉睡中停止">在沉睡中停止</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyThread2</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"run start"</span><span class="o">);</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">20000</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"run end"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"run catch "</span><span class="o">+</span><span class="k">this</span><span class="o">.</span><span class="na">isInterrupted</span><span class="o">());</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">MyThread2</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyThread2</span><span class="o">();</span>
            <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
            <span class="n">t2</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"main catch"</span><span class="o">);</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"main end"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行结果：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run</span> <span class="n">start</span>
<span class="n">main</span> <span class="n">end</span>
<span class="n">run</span> <span class="k">catch</span> <span class="kc">false</span>
<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">InterruptedException</span><span class="o">:</span> <span class="n">sleep</span> <span class="n">interrupted</span>
	<span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="nc">Native</span> <span class="nc">Method</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">zhisheng</span><span class="o">.</span><span class="na">thread</span><span class="o">.</span><span class="na">thread1</span><span class="o">.</span><span class="na">MyThread2</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">MyThread2</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">12</span><span class="o">)</span>
</code></pre></div></div>

<p>从运行结果来看，如果在 sleep 状态下停止某一线程，会进入 catch 语句，并清除停止状态值，使之变成 false。</p>

<h4 id="在停止中沉睡">在停止中沉睡</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyThread3</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"run start"</span><span class="o">);</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">20000</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"run end"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"run catch "</span><span class="o">+</span><span class="k">this</span><span class="o">.</span><span class="na">isInterrupted</span><span class="o">());</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">MyThread3</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyThread3</span><span class="o">();</span>
            <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
            <span class="n">t3</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行结果：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run</span> <span class="n">start</span>
<span class="n">run</span> <span class="k">catch</span> <span class="kc">false</span>
<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">InterruptedException</span><span class="o">:</span> <span class="n">sleep</span> <span class="n">interrupted</span>
	<span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="nc">Native</span> <span class="nc">Method</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">zhisheng</span><span class="o">.</span><span class="na">thread</span><span class="o">.</span><span class="na">thread1</span><span class="o">.</span><span class="na">MyThread3</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">MyThread3</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">12</span><span class="o">)</span>
</code></pre></div></div>

<h4 id="能停止的线程--暴力停止">能停止的线程 —— 暴力停止</h4>

<p>使用 stop() 方法停止线程</p>

<h3 id="暂停线程">暂停线程</h3>

<p>可使用 suspend 方法暂停线程，使用 resume() 方法恢复线程的执行。</p>

<h4 id="suspend-和-resume-方法的使用">suspend 和 resume 方法的使用</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyThread4</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getI</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setI</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">i</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">MyThread4</span> <span class="n">t4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyThread4</span><span class="o">();</span>
        <span class="n">t4</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"A----- "</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">" ---- "</span> <span class="o">+</span> <span class="n">t4</span><span class="o">.</span><span class="na">getI</span><span class="o">());</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"A----- "</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">" ---- "</span> <span class="o">+</span> <span class="n">t4</span><span class="o">.</span><span class="na">getI</span><span class="o">());</span>
        <span class="n">t4</span><span class="o">.</span><span class="na">suspend</span><span class="o">();</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
        <span class="n">t4</span><span class="o">.</span><span class="na">resume</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"B----- "</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">" ---- "</span> <span class="o">+</span> <span class="n">t4</span><span class="o">.</span><span class="na">getI</span><span class="o">());</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"B----- "</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">" ---- "</span> <span class="o">+</span> <span class="n">t4</span><span class="o">.</span><span class="na">getI</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>从运行结果来看，线程的确能够暂停和恢复。</p>

<p>但是 suspend 和 resume 方法的缺点就是：<strong>不同步</strong>，因为线程的暂停导致数据的不同步。</p>

<h3 id="yield-方法">yield 方法</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
     * A hint to the scheduler that the current thread is willing to yield
     * its current use of a processor. The scheduler is free to ignore this
     * hint.
     *
     * &lt;p&gt; Yield is a heuristic attempt to improve relative progression
     * between threads that would otherwise over-utilise a CPU. Its use
     * should be combined with detailed profiling and benchmarking to
     * ensure that it actually has the desired effect.
     *
     * &lt;p&gt; It is rarely appropriate to use this method. It may be useful
     * for debugging or testing purposes, where it may help to reproduce
     * bugs due to race conditions. It may also be useful when designing
     * concurrency control constructs such as the ones in the
     * {@link java.util.concurrent.locks} package.
     */</span>
    <span class="c1">//暂停当前正在执行的线程对象，并执行其他线程。暂停的时间不确定。</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">yield</span><span class="o">();</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyThread5</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">double</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">200000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">//yield();//暂停的时间不确定</span>
            <span class="n">i</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="kt">double</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"time is "</span><span class="o">+(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">MyThread5</span>  <span class="n">t5</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyThread5</span><span class="o">();</span>
        <span class="n">t5</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="线程的优先级">线程的优先级</h3>

<p>设置优先级的方法：setPriority() 方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setPriority</span><span class="o">(</span><span class="kt">int</span> <span class="n">newPriority</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ThreadGroup</span> <span class="n">g</span><span class="o">;</span>
        <span class="n">checkAccess</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">newPriority</span> <span class="o">&gt;</span> <span class="no">MAX_PRIORITY</span> <span class="o">||</span> <span class="n">newPriority</span> <span class="o">&lt;</span> <span class="no">MIN_PRIORITY</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">((</span><span class="n">g</span> <span class="o">=</span> <span class="n">getThreadGroup</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">newPriority</span> <span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="na">getMaxPriority</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">newPriority</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="na">getMaxPriority</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">setPriority0</span><span class="o">(</span><span class="n">priority</span> <span class="o">=</span> <span class="n">newPriority</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>不一定优先级高的线程就先执行。</p>

<h3 id="守护线程">守护线程</h3>

<p>当进程中不存在非守护线程了，则守护线程自动销毁。垃圾回收线程就是典型的守护线程，当进程中没有非守护线程了，则垃圾回收线程也就没有存在的必要了，自动销毁。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cm">/**
     * Marks this thread as either a {@linkplain #isDaemon daemon} thread
     * or a user thread. The Java Virtual Machine exits when the only
     * threads running are all daemon threads.
     *
     * &lt;p&gt; This method must be invoked before the thread is started.
     *
     * @param  on
     *         if {@code true}, marks this thread as a daemon thread
     * @throws  IllegalThreadStateException
     *          if this thread is {@linkplain #isAlive alive}
     * @throws  SecurityException
     *          if {@link #checkAccess} determines that the current
     *          thread cannot modify this thread
     */</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setDaemon</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">on</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">checkAccess</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isAlive</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalThreadStateException</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">daemon</span> <span class="o">=</span> <span class="n">on</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<h2 id="第二章--对象及变量的并发访问">第二章 —— 对象及变量的并发访问</h2>

<p>技术点：</p>

<ul>
  <li>synchronized 对象监视器为 Object 时的使用</li>
  <li>synchronized 对象监视器为 Class 时的使用</li>
  <li>非线程安全是如何出现的</li>
  <li>关键字 volatile 的主要作用</li>
  <li>关键字 volatile 与 synchronized 的区别及使用情况</li>
</ul>

<h3 id="synchronized-同步方法">synchronized 同步方法</h3>

<h4 id="方法内的变量为线程安全">方法内的变量为线程安全</h4>

<p>“非线程安全”问题存在于“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题，所得结果也就是“线程安全”了。</p>

<h4 id="实例变量非线程安全">实例变量非线程安全</h4>

<p>如果多线程共同访问一个对象中的实例变量，则有可能出现“非线程安全”问题。</p>

<p>在两个线程访问同一个对象中的同步方法时一定是线程安全的。</p>

<h4 id="脏读">脏读</h4>

<p>发生脏读的情况是在读取实例变量时，此值已经被其他线程更改过了。</p>

<p>如下例子就可以说明，如果不加 synchronized 关键字在 setValue 和 getValue 方法上，就会出现数据脏读。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">VarName</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">userName</span> <span class="o">=</span> <span class="s">"A"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"AA"</span><span class="o">;</span>
    <span class="kd">synchronized</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="nc">String</span> <span class="n">userName</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"setValue method Thread name is :  "</span> <span class="o">+</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" userName = "</span> <span class="o">+</span> <span class="n">userName</span> <span class="o">+</span> <span class="s">" password = "</span> <span class="o">+</span> <span class="n">password</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">//synchronized</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"getValue method Thread name is :  "</span> <span class="o">+</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" userName = "</span> <span class="o">+</span> <span class="n">userName</span> <span class="o">+</span> <span class="s">" password = "</span> <span class="o">+</span> <span class="n">password</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Thread1</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">VarName</span> <span class="n">varName</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Thread1</span><span class="o">(</span><span class="nc">VarName</span> <span class="n">varName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">varName</span> <span class="o">=</span> <span class="n">varName</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">varName</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">"B"</span><span class="o">,</span> <span class="s">"BB"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">VarName</span> <span class="n">v</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">VarName</span><span class="o">();</span>
        <span class="nc">Thread1</span> <span class="n">thread1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread1</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
        <span class="n">thread1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span><span class="c1">//打印结果受睡眠时间的影响</span>
        <span class="n">v</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="synchronized-锁重入">synchronized 锁重入</h4>

<p>关键字 synchronized 拥有锁重入的功能，也就是在使用 synchronized 时，当一个线程得到一个对象锁后，再次请求此对象锁是可以再次得到该对象的锁的。这也证明了在一个 synchronized 方法/块的内部调用本类的其他 synchronized 方法/块时，是永远可以得到锁的。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Service</span>
<span class="o">{</span>
    <span class="kd">synchronized</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service1</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"service 1"</span><span class="o">);</span>
        <span class="n">service2</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">synchronized</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service2</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"service 2"</span><span class="o">);</span>
        <span class="n">service3</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">synchronized</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service3</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"service 3"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Thread2</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Service</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Service</span><span class="o">();</span>
        <span class="n">s</span><span class="o">.</span><span class="na">service1</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Thread2</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread2</span><span class="o">();</span>
        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行结果：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service 1
service 2
service 3
</code></pre></div></div>

<h4 id="同步不具有继承性">同步不具有继承性</h4>

<p>同步不可以继承。</p>

<h3 id="synchronized-同步语句块">synchronized 同步语句块</h3>

<h4 id="synchronized-代码块间的同步性">synchronized 代码块间的同步性</h4>

<p>当一个线程访问 object 的一个 synchronized(this) 同步代码块时，其他线程对同一个 object 中所有其他 synchronized(this) 同步代码块的访问将被阻塞，这说明 synchronized 使用的 “对象监视器” 是一个。</p>

<h4 id="将任意对象作为对象监视器">将任意对象作为对象监视器</h4>

<p>多个线程调用同一个对象中的不同名称的 synchronized 同步方法或者 synchronized(this) 同步代码块时，调用的效果就是按顺序执行，也就是同步的，阻塞的。</p>

<h4 id="静态同步-synchronized-方法与--synchronizedclass-代码块">静态同步 synchronized 方法与  synchronized(class) 代码块</h4>

<p>关键字 synchronized 还可以应用在 static 静态方法上，如果这样写就是对当前的 *.java 文件对应的 Class 类进行加锁。而 synchronized 关键字加到非 static 静态方法上就是给对象加锁。</p>

<h4 id="多线程的死锁">多线程的死锁</h4>

<h3 id="volatile-关键字">volatile 关键字</h3>

<p>作用：使变量在多个线程间可见。</p>

<p>通过使用 volatile 关键字，强制的从公共内存中读取变量的值。使用 volatile 关键字增加了实例变量在多个线程之间的可见性，但 volatile 关键字最致命的缺点就是不支持原子性。</p>

<p>关键字 synchronized 和 volatile 比较：</p>

<ul>
  <li>
    <p>关键字 volatile 是线程同步的轻量实现，所以 volatile 性能肯定要比 synchronized 要好，并且 volatile 只能修饰于变量，而 synchronized 可以修饰方法，以及代码块。</p>
  </li>
  <li>
    <p>多线程访问 volatile 不会发生阻塞，而 synchronized 会出现阻塞。</p>
  </li>
  <li>
    <p>volatile 能保证数据的可见性，但不能保证原子性；而 synchronized 可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公有内存中的数据做同步。</p>
  </li>
  <li>
    <p>关键字 volatile 解决的是变量在多个线程之间的可见性；而 synchronized 关键字解决的是多个线程之间访问资源的同步性。</p>

    <p>​</p>
  </li>
</ul>

<h2 id="第三章--线程间通信">第三章 —— 线程间通信</h2>

<p>技术点：</p>

<ul>
  <li>使用 wait/notify 实现线程间的通信</li>
  <li>生产者/消费者模式的实现</li>
  <li>方法 join 的使用</li>
  <li>ThreadLocal 类的使用</li>
</ul>

<h3 id="等待通知机制">等待/通知机制</h3>

<p>wait 使线程停止运行，notify 使停止的线程继续运行。</p>

<p>关键字 synchronized 可以将任何一个 Object 对象作为同步对象看待，而 Java 为每个 Object 都实现了 wait() 和 notify() 方法，他们必须用在被 synchronized 同步的 Object 的临界区内。通过调用 wait 方法可以使处于临界区内的线程进入等待状态，同时释放被同步对象的锁。而 notify 操作可以唤醒一个因调用了 wait 方法而处于阻塞状态的线程，使其进入就绪状态。被重新唤醒的线程会试图重新获得临界区的控制权，继续执行临界区内 wait 之后的代码。</p>

<p>wait 方法可以使调用该方法的线程释放共享资源的锁，从运行状态退出，进入等待状态，直到再次被唤醒。</p>

<p>notify() 方法可以随机唤醒等待对列中等待同一共享资源的一个线程，并使该线程退出等待状态，进入可运行状态。</p>

<p>notifyAll() 方法可以随机唤醒等待对列中等待同一共享资源的所有线程，并使这些线程退出等待状态，进入可运行状态。</p>

<h4 id="线程状态示意图">线程状态示意图：</h4>

<p><img src="http://ohfk1r827.bkt.clouddn.com/thread-state.jpg" alt="" /></p>

<ul>
  <li>
    <p>新创建一个线程对象后，在调用它的 start() 方法，系统会为此线程分配 CPU 资源，使其处于 Runnable（可运行）状态，如果线程抢占到 CPU 资源，此线程就会处于 Running （运行）状态</p>
  </li>
  <li>
    <p>Runnable 和 Running 状态之间可以相互切换，因为线程有可能运行一段时间后，有其他优先级高的线程抢占了 CPU 资源，此时线程就从 Running 状态变成了 Runnable 状态。</p>

    <p>线程进入 Runnable 状态有如下几种情况：</p>

    <ul>
      <li>调用 sleep() 方法后经过的时间超过了指定的休眠时间</li>
      <li>线程调用的阻塞 IO 已经返回，阻塞方法执行完毕</li>
      <li>线程成功的获得了试图同步的监视器</li>
      <li>线程正在等待某个通知，其他线程发出了通知</li>
      <li>处于挂状态的线程调用了 resume 恢复方法</li>
    </ul>
  </li>
  <li>
    <p>Blocked 是阻塞的意思，例如线程遇到一个 IO 操作，此时 CPU 处于空闲状态，可能会转而把 CPU 时间片分配给其他线程，这时也可以称为 “暂停”状态。Blocked 状态结束之后，进入 Runnable 状态，等待系统重新分配资源。</p>

    <p>出现阻塞状态的有如下几种情况：</p>

    <ul>
      <li>线程调用 sleep 方法，主动放弃占用的处理器资源</li>
      <li>线程调用了阻塞式 IO 方法，在该方法返回之前，该线程被阻塞</li>
      <li>线程试图获得一个同步监视器，但该同步监视器正在被其他线程所持有</li>
      <li>线程等待某个通知</li>
      <li>程序调用了 suspend 方法将该线程挂起</li>
    </ul>
  </li>
  <li>
    <p>run 方法运行结束后进入销毁阶段，整个线程执行完毕。</p>
  </li>
</ul>

<h4 id="生产者消费者模式实现">生产者/消费者模式实现</h4>

<p>一个生产者，一个消费者</p>

<p>存储值对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread5</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/3.
 * 存储值对象
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValueObject</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>生产者：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread5</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/3.
 * 生产者
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">lock</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Product</span><span class="o">(</span><span class="nc">String</span> <span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">lock</span> <span class="o">=</span> <span class="n">lock</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="nc">ValueObject</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">""</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">lock</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">"_"</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"生产者 set 的值是："</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
            <span class="nc">ValueObject</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>消费者：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread5</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/3.
 * 消费者
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Resume</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">lock</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Resume</span><span class="o">(</span><span class="nc">String</span> <span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">lock</span> <span class="o">=</span> <span class="n">lock</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">ValueObject</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">""</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">lock</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"消费者 get 的值："</span> <span class="o">+</span> <span class="nc">ValueObject</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
            <span class="nc">ValueObject</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>生产者线程：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread5</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/3.
 * 生产者线程
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductThread</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Product</span> <span class="n">p</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductThread</span><span class="o">(</span><span class="nc">Product</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">p</span><span class="o">.</span><span class="na">setValue</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>消费者线程：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread5</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/3.
 * 消费者线程
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResumeThread</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Resume</span> <span class="n">r</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ResumeThread</span><span class="o">(</span><span class="nc">Resume</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">r</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>主函数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread5</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/3.
 * 一个生产者一个消费者测试
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="nc">Product</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
        <span class="nc">Resume</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Resume</span><span class="o">(</span><span class="n">str</span><span class="o">);;</span>
        <span class="nc">ProductThread</span> <span class="n">pt</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProductThread</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
        <span class="nc">ResumeThread</span> <span class="n">rt</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ResumeThread</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
        <span class="n">pt</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">rt</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>题目：创建20个线程，其中10个线程是将数据备份到数据库A，另外10个线程将数据备份到数据库B中去，并且备份数据库A和备份数据库B是交叉进行的。</p>

<p>工具类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread6</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/3.
 * 创建20个线程，其中10个线程是将数据备份到数据库A，另外10个线程将数据备份到数据库B中去，并且
 * 备份数据库A和备份数据库B是交叉进行的
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DBTools</span>
<span class="o">{</span>
    <span class="kd">volatile</span> <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">prevIsA</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

    <span class="c1">//确保A备份先进行</span>
    <span class="kd">synchronized</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">backA</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">prevIsA</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">wait</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"AAAAA"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">prevIsA</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">notifyAll</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">synchronized</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">backB</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">prevIsA</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">wait</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"BBBBB"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">prevIsA</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="n">notifyAll</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>备份A先线程：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread6</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/3.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadA</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">DBTools</span> <span class="n">dbTools</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ThreadA</span><span class="o">(</span><span class="nc">DBTools</span> <span class="n">dbTools</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dbTools</span> <span class="o">=</span> <span class="n">dbTools</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">dbTools</span><span class="o">.</span><span class="na">backA</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>备份B线程：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread6</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/3.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadB</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">DBTools</span> <span class="n">dbTools</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ThreadB</span><span class="o">(</span><span class="nc">DBTools</span> <span class="n">dbTools</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dbTools</span> <span class="o">=</span> <span class="n">dbTools</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">dbTools</span><span class="o">.</span><span class="na">backB</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread6</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/3.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">DBTools</span> <span class="n">dbTools</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DBTools</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">ThreadB</span> <span class="n">tb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadB</span><span class="o">(</span><span class="n">dbTools</span><span class="o">);</span>
            <span class="n">tb</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
            <span class="nc">ThreadA</span> <span class="n">ta</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadA</span><span class="o">(</span><span class="n">dbTools</span><span class="o">);</span>
            <span class="n">ta</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="join-方法的使用">Join 方法的使用</h3>

<p>作用：等待线程对象销毁</p>

<p>join 方法具有使线程排队运行的作用，有些类似同步的运行效果。join 与 synchronized 的区别是：join 在内部使用 wait() 方法进行等待，而 synchronized 关键字使用的是 “对象监视器” 原理做为同步。</p>

<p>在 join 过程中，如果当前线程对象被中断，则当前线程出现异常。</p>

<p>方法 join(long) 中的参数是设定等待的时间。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
     * 等待该线程终止的时间最长为 millis 毫秒。超时为 0 意味着要一直等下去。
     * Waits at most {@code millis} milliseconds for this thread to
     * die. A timeout of {@code 0} means to wait forever.
     *
     * &lt;p&gt; This implementation uses a loop of {@code this.wait} calls
     * conditioned on {@code this.isAlive}. As a thread terminates the
     * {@code this.notifyAll} method is invoked. It is recommended that
     * applications not use {@code wait}, {@code notify}, or
     * {@code notifyAll} on {@code Thread} instances.
     *
     * @param  millis
     *         the time to wait in milliseconds
     *
     * @throws  IllegalArgumentException
     *          if the value of {@code millis} is negative
     *
     * @throws  InterruptedException
     *          if any thread has interrupted the current thread. The
     *          &lt;i&gt;interrupted status&lt;/i&gt; of the current thread is
     *          cleared when this exception is thrown.
     */</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">join</span><span class="o">(</span><span class="kt">long</span> <span class="n">millis</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">base</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="kt">long</span> <span class="n">now</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">millis</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"timeout value is negative"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">millis</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">isAlive</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">wait</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">isAlive</span><span class="o">())</span> <span class="o">{</span>
                <span class="kt">long</span> <span class="n">delay</span> <span class="o">=</span> <span class="n">millis</span> <span class="o">-</span> <span class="n">now</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">delay</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="n">wait</span><span class="o">(</span><span class="n">delay</span><span class="o">);</span>
                <span class="n">now</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">base</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<h3 id="类--threadlocal--的使用">类  ThreadLocal  的使用</h3>

<p>该类提供了线程局部 (thread-local) 变量。这些变量不同于它们的普通对应物，因为访问某个变量（通过其 get 或
set 方法）的每个线程都有自己的局部变量，它独立于变量的初始化副本。ThreadLocal 实例通常是类中的
private static 字段，它们希望将状态与某一个线程（例如，用户 ID 或事务 ID）相关联。</p>

<h4 id="get-方法">get() 方法</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="no">T</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
        <span class="nc">ThreadLocalMap</span> <span class="n">map</span> <span class="o">=</span> <span class="n">getMap</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">map</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">ThreadLocalMap</span><span class="o">.</span><span class="na">Entry</span> <span class="n">e</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">getEntry</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
                <span class="no">T</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span><span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
                <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nf">setInitialValue</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>返回此线程局部变量的当前线程副本中的值。如果变量没有用于当前线程的值，则先将其初始化为调用 initialValue() 方法返回的值。</p>

<h3 id="inheritablethreadlocal-类的使用">InheritableThreadLocal 类的使用</h3>

<p>该类扩展了 ThreadLocal，为子线程提供从父线程那里继承的值：在创建子线程时，子线程会接收所有可继承的线程局部变量的初始值，以获得父线程所具有的值。通常，子线程的值与父线程的值是一致的；但是，通过重写这个类中的 childValue 方法，子线程的值可以作为父线程值的一个任意函数。</p>

<p>当必须将变量（如用户 ID 和 事务 ID）中维护的每线程属性（per-thread-attribute）自动传送给创建的所有子线程时，应尽可能地采用可继承的线程局部变量，而不是采用普通的线程局部变量。</p>

<h2 id="第四章---lock-的使用">第四章 ——  Lock 的使用</h2>

<h3 id="使用-reentrantlock-类">使用 ReentrantLock 类</h3>

<p>一个可重入的互斥锁 Lock，它具有与使用 <code class="language-plaintext highlighter-rouge">synchronized</code> 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。</p>

<p><code class="language-plaintext highlighter-rouge">ReentrantLock</code> 将由最近成功获得锁，并且还没有释放该锁的线程所<em>拥有</em>。当锁没有被另一个线程所拥有时，调用 <code class="language-plaintext highlighter-rouge">lock</code> 的线程将成功获取该锁并返回。如果当前线程已经拥有该锁，此方法将立即返回。可以使用 <code class="language-plaintext highlighter-rouge">isHeldByCurrentThread()</code>和 <code class="language-plaintext highlighter-rouge">getHoldCount()</code>方法来检查此情况是否发生。</p>

<p>此类的构造方法接受一个可选的<em>公平</em> 参数。当设置为 <code class="language-plaintext highlighter-rouge">true</code> 时，在多个线程的争用下，这些锁倾向于将访问权授予等待时间最长的线程。否则此锁将无法保证任何特定访问顺序。与采用默认设置（使用不公平锁）相比，使用公平锁的程序在许多线程访问时表现为很低的总体吞吐量（即速度很慢，常常极其慢），但是在获得锁和保证锁分配的均衡性时差异较小。不过要注意的是，公平锁不能保证线程调度的公平性。因此，使用公平锁的众多线程中的一员可能获得多倍的成功机会，这种情况发生在其他活动线程没有被处理并且目前并未持有锁时。还要注意的是，未定时的 <code class="language-plaintext highlighter-rouge">tryLock</code>方法并没有使用公平设置。因为即使其他线程正在等待，只要该锁是可用的，此方法就可以获得成功。</p>

<p>建议<em>总是</em> 立即实践，使用 <code class="language-plaintext highlighter-rouge">lock</code> 块来调用 <code class="language-plaintext highlighter-rouge">try</code>，在之前/之后的构造中，最典型的代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">X</span> <span class="o">{</span>
   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span>
   <span class="c1">// ...</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">m</span><span class="o">()</span> <span class="o">{</span>
     <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>  <span class="c1">// block until condition holds</span>
     <span class="k">try</span> <span class="o">{</span>
       <span class="c1">// ... method body</span>
     <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
       <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">()</span>
     <span class="o">}</span>
   <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="condition">Condition</h3>

<p>Condition 将 Object 监视器方法（wait、notify 和 notifyAll）分解成截然不同的对象，以便通过将这些对象与任意 Lock 实现组合使用，为每个对象提供多个等待 set（wait-set）。其中，Lock 替代了 synchronized 方法和语句的使用，Condition 替代了 Object 监视器方法的使用。</p>

<p>假定有一个绑定的缓冲区，它支持 put 和 take 方法。如果试图在空的缓冲区上执行 take 操作，则在某一个项变得可用之前，线程将一直阻塞；如果试图在满的缓冲区上执行 put 操作，则在有空间变得可用之前，线程将一直阻塞。我们喜欢在单独的等待 set 中保存 put 线程和 take 线程，这样就可以在缓冲区中的项或空间变得可用时利用最佳规划，一次只通知一个线程。可以使用两个 Condition 实例来做到这一点。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BoundedBuffer</span> <span class="o">{</span>
   <span class="kd">final</span> <span class="nc">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span>
   <span class="kd">final</span> <span class="nc">Condition</span> <span class="n">notFull</span>  <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
   <span class="kd">final</span> <span class="nc">Condition</span> <span class="n">notEmpty</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>

   <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">items</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="mi">100</span><span class="o">];</span>
   <span class="kt">int</span> <span class="n">putptr</span><span class="o">,</span> <span class="n">takeptr</span><span class="o">,</span> <span class="n">count</span><span class="o">;</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="nc">Object</span> <span class="n">x</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
     <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
     <span class="k">try</span> <span class="o">{</span>
       <span class="k">while</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
         <span class="n">notFull</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
       <span class="n">items</span><span class="o">[</span><span class="n">putptr</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
       <span class="k">if</span> <span class="o">(++</span><span class="n">putptr</span> <span class="o">==</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="n">putptr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
       <span class="o">++</span><span class="n">count</span><span class="o">;</span>
       <span class="n">notEmpty</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
     <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
       <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
     <span class="o">}</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">take</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
     <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
     <span class="k">try</span> <span class="o">{</span>
       <span class="k">while</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
         <span class="n">notEmpty</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
       <span class="nc">Object</span> <span class="n">x</span> <span class="o">=</span> <span class="n">items</span><span class="o">[</span><span class="n">takeptr</span><span class="o">];</span>
       <span class="k">if</span> <span class="o">(++</span><span class="n">takeptr</span> <span class="o">==</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="n">takeptr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
       <span class="o">--</span><span class="n">count</span><span class="o">;</span>
       <span class="n">notFull</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
       <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
     <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
       <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
     <span class="o">}</span>
   <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="正确使用-condition-实现等待通知">正确使用 Condition 实现等待/通知</h3>

<p>MyService.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.Thread9</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.Condition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.Lock</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyService</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">Condition</span> <span class="n">condition</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">await</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"await A"</span><span class="o">);</span>
            <span class="n">condition</span><span class="o">.</span><span class="na">await</span><span class="o">();</span><span class="c1">//使当前执行的线程处于等待状态 waiting</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"await B"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"释放锁"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">signal</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"signal A"</span><span class="o">);</span>
        <span class="n">condition</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"signal B"</span><span class="o">);</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>ThreadA.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.Thread9</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadA</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">MyService</span> <span class="n">service</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ThreadA</span><span class="o">(</span><span class="nc">MyService</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">service</span> <span class="o">=</span> <span class="n">service</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">service</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Test.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.Thread9</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">MyService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyService</span><span class="o">();</span>
        <span class="nc">ThreadA</span> <span class="n">ta</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadA</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
        <span class="n">ta</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行结果：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">await</span> <span class="no">A</span>
<span class="n">signal</span> <span class="no">A</span>
<span class="n">signal</span> <span class="no">B</span>
<span class="n">await</span> <span class="no">B</span>
<span class="n">释放锁</span>
</code></pre></div></div>

<p>Object 类中的 wait() 方法相当于 Condition 类中 await() 方法</p>

<p>Object 类中的 wait(long time) 方法相当于 Condition 类中 await(long time, TimeUnit unit) 方法</p>

<p>Object 类中的 notify() 方法相当于 Condition 类中 signal() 方法</p>

<p>Object 类中的 notifyAll() 方法相当于 Condition 类中 signalAll() 方法</p>

<p>题目：实现生产者与消费者  一对一交替打印</p>

<p>MyService.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread10</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.Condition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.Lock</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 * 实现生产者与消费者  一对一·交替打印
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyService</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">Condition</span> <span class="n">condition</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
    <span class="kd">private</span>  <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">flag</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">condition</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"SetValue  AAAAAA"</span><span class="o">);</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">condition</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">flag</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">condition</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"GetValue BBBB"</span><span class="o">);</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="n">condition</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>ThreadA.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread10</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadA</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">MyService</span> <span class="n">service</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ThreadA</span><span class="o">(</span><span class="nc">MyService</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">service</span> <span class="o">=</span> <span class="n">service</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">service</span><span class="o">.</span><span class="na">setValue</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>ThreadB.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread10</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadB</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">MyService</span> <span class="n">service</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ThreadB</span><span class="o">(</span><span class="nc">MyService</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">service</span> <span class="o">=</span> <span class="n">service</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">service</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Test.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread10</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">MyService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyService</span><span class="o">();</span>
        <span class="nc">ThreadA</span> <span class="n">ta</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadA</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
        <span class="nc">ThreadB</span> <span class="n">tb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadB</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
        <span class="n">ta</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">tb</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>getHoldCount() 查询当前线程保持此锁定的个数，也就是调用 lock() 的方法</p>

<p>getQueueLength() 返回正等待获取此锁定的线程估计数</p>

<p>getWaitQueueLength() 返回等待与此锁定相关的给定条件 Condition 的线程估计数</p>

<p>hasQueuedThread() 查询指定的线程是否正在等待获取此锁定</p>

<p>hasQueuedThreads() 查询是否有线程正在等待获取此锁定</p>

<p>hasWaiters() 查询是否有线程正在等待与此锁定有关的 condition 条件</p>

<p>isFair() 判断是否是公平锁（默认下 ReentrantLock类使用的是非公平锁）</p>

<p>isHeldByCurrentThread() 查询当前线程是否保持此锁定</p>

<p>isLocked() 查询此锁定是否由任意线程保持</p>

<p>lockInterruptibly() 如果当前线程未被中断，则获取锁定，如果已经被中断则出现异常</p>

<p>tryLock() 仅在调用时锁定未被另一个线程保持的情况下，才获取该锁定</p>

<p>tryLock(long time, TimeUtil util) 如果锁定在给定的等待时间内没有被另一个线程保持，且当前线程未被中断，则获取该锁定。</p>

<h3 id="使用-reentrantreadwritelock-类">使用 ReentrantReadWriteLock 类</h3>

<p>读写互斥：</p>

<p>MyService.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.Thread11</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantReadWriteLock</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyService</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">ReentrantReadWriteLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantReadWriteLock</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">read</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">readLock</span><span class="o">().</span><span class="na">lock</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" Read AAA  "</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">readLock</span><span class="o">().</span><span class="na">unlock</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">writeLock</span><span class="o">().</span><span class="na">lock</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" write BBB "</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">writeLock</span><span class="o">().</span><span class="na">unlock</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>ThreadA.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.Thread11</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadA</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">MyService</span> <span class="n">service</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ThreadA</span><span class="o">(</span><span class="nc">MyService</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">service</span> <span class="o">=</span> <span class="n">service</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">service</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>ThreadB.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.Thread11</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadB</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="nc">MyService</span> <span class="n">service</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ThreadB</span><span class="o">(</span><span class="nc">MyService</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">service</span> <span class="o">=</span> <span class="n">service</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">service</span><span class="o">.</span><span class="na">write</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Test.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.Thread11</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">MyService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyService</span><span class="o">();</span>
        <span class="nc">ThreadA</span> <span class="n">ta</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadA</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
        <span class="n">ta</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"A"</span><span class="o">);</span>
        <span class="n">ta</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="nc">ThreadB</span> <span class="n">tb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadB</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
        <span class="n">tb</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"B"</span><span class="o">);</span>
        <span class="n">tb</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行结果：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A Read AAA  1496556770402
B write BBB 1496556780402
</code></pre></div></div>

<h2 id="第六章--单例模式与多线程">第六章 —— 单例模式与多线程</h2>

<p>推荐文章 <a href="http://blog.csdn.net/tzs_1041218129/article/details/51246419">《深入浅出单实例Singleton设计模式》</a></p>

<h3 id="立即加载模式--饿汉模式">立即加载模式 / “饿汉模式”</h3>

<p>立即加载：使用类的时候已经将对象创建完毕，new 实例化</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">MyObject</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyObject</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nf">MyObject</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">MyObject</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="延迟加载---懒汉模式-">延迟加载 / “ 懒汉模式 ”</h3>

<p>就是在调用 get 的时候实例才被创建。在 get() 方法中进行 new 实例化。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span>
<span class="o">{</span>
    <span class="kd">private</span>  <span class="kd">static</span>  <span class="nc">MyObject</span> <span class="n">object</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nf">MyObject</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">MyObject</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">object</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyObject</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用 DCL 双重检查锁，解决“懒汉模式”遇到的多线程问题</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span>
<span class="o">{</span>
    <span class="kd">private</span>  <span class="kd">volatile</span> <span class="kd">static</span>  <span class="nc">MyObject</span> <span class="n">object</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nf">MyObject</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="c1">//synchronized</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">MyObject</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">object</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="kd">synchronized</span> <span class="o">(</span><span class="nc">MyObject</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">object</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyObject</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="使用静态内部类实现单例模式">使用静态内部类实现单例模式</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MyObjectHandler</span>
    <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="nc">MyObject</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyObject</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nf">MyObject</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">MyObject</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">MyObjectHandler</span><span class="o">.</span><span class="na">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="序列化与反序列化的单例模式实现">序列化与反序列化的单例模式实现</h3>

<p>MyObject.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread15</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.ObjectStreamException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span> <span class="kd">implements</span> <span class="nc">Serializable</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span>  <span class="mi">888L</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MyObjectHandler</span>
    <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">MyObject</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyObject</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nf">MyObject</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span>  <span class="nc">MyObject</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">MyObjectHandler</span><span class="o">.</span><span class="na">object</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">ObjectStreamException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"调用了readResolve方法！"</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">MyObjectHandler</span><span class="o">.</span><span class="na">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>SaveAndRead.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread15</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SaveAndRead</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">MyObject</span> <span class="n">object</span> <span class="o">=</span> <span class="nc">MyObject</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
            <span class="nc">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"fos.txt"</span><span class="o">));</span>
            <span class="nc">ObjectOutputStream</span> <span class="n">oos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
            <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
            <span class="n">oos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="n">fos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">object</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"fos.txt"</span><span class="o">));</span>
            <span class="nc">ObjectInputStream</span> <span class="n">ois</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
            <span class="nc">MyObject</span> <span class="n">o</span> <span class="o">=</span> <span class="o">(</span><span class="nc">MyObject</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
            <span class="n">ois</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里主要要指出 MyObject.java 中 readResolve 方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">ObjectStreamException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"调用了readResolve方法！"</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">MyObjectHandler</span><span class="o">.</span><span class="na">object</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>方法 readResolve 允许 class 在反序列化返回对象前替换、解析在流中读出来的对象。实现 readResolve 方法，一个 class 可以直接控制反序化返回的类型和对象引用。</p>

<p>方法 readResolve 会在 ObjectInputStream 已经读取一个对象并在准备返回前调用。ObjectInputStream 会检查对象的 class 是否定义了 readResolve 方法。如果定义了，将由 readResolve 方法指定返回的对象。返回对象的类型一定要是兼容的，否则会抛出 ClassCastException 。</p>

<h3 id="使用-static-代码块实现单例模式">使用 static 代码块实现单例模式</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread16</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">MyObject</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nf">MyObject</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="o">{</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyObject</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">MyObject</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>ThreadA.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread16</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadA</span> <span class="kd">extends</span> <span class="nc">Thread</span>
<span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">MyObject</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">hashCode</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Test.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.zhisheng.thread.thread16</span><span class="o">;</span>

<span class="cm">/**
 * Created by 10412 on 2017/6/4.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ThreadA</span> <span class="n">ta1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadA</span><span class="o">();</span>
        <span class="nc">ThreadA</span> <span class="n">ta2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadA</span><span class="o">();</span>
        <span class="nc">ThreadA</span> <span class="n">ta3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadA</span><span class="o">();</span>
        <span class="n">ta1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">ta2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">ta3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="使用枚举数据类型实现单例模式">使用枚举数据类型实现单例模式</h3>

<p>在使用枚举类时，构造方法会被自动调用，也可以应用这个特性实现单例模式。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">enum</span> <span class="nc">MyEnumSingleton</span><span class="o">{</span>
        <span class="no">INSTANCE</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">Resource</span> <span class="n">resource</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nf">MyEnumSingleton</span><span class="o">(){</span>
            <span class="n">resource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Resource</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="nc">Resource</span> <span class="nf">getResource</span><span class="o">(){</span>
            <span class="k">return</span> <span class="n">resource</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Resource</span> <span class="nf">getResource</span><span class="o">(){</span>
        <span class="k">return</span> <span class="nc">MyEnumSingleton</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">getResource</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">test.MyObject</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Run</span> <span class="o">{</span>
    <span class="kd">class</span> <span class="nc">MyThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">MyObject</span><span class="o">.</span><span class="na">getResource</span><span class="o">().</span><span class="na">hashCode</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Run</span><span class="o">.</span><span class="na">MyThread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Run</span><span class="o">().</span><span class="na">new</span> <span class="nc">MyThread</span><span class="o">();</span>
        <span class="nc">Run</span><span class="o">.</span><span class="na">MyThread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Run</span><span class="o">().</span><span class="na">new</span> <span class="nc">MyThread</span><span class="o">();</span>
        <span class="nc">Run</span><span class="o">.</span><span class="na">MyThread</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Run</span><span class="o">().</span><span class="na">new</span> <span class="nc">MyThread</span><span class="o">();</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里再推荐一篇 stackoverflow 上的一个问题回答： <a href="https://stackoverflow.com/questions/70689/what-is-an-efficient-way-to-implement-a-singleton-pattern-in-java">What is an efficient way to implement a singleton pattern in Java?</a></p>

<h2 id="总结">总结</h2>

<p>本篇文章是我读 《Java多线程编程核心技术》 的笔记及自己的一些总结，觉得不错，欢迎点赞和转发。</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[第一章 —— Java 多线程技能]]></summary></entry><entry><title type="html">Python爬虫</title><link href="http://localhost:4000/jekyll/update/2024/03/12/Python%E7%88%AC%E8%99%AB.html" rel="alternate" type="text/html" title="Python爬虫" /><published>2024-03-12T13:56:00+08:00</published><updated>2024-03-12T13:56:00+08:00</updated><id>http://localhost:4000/jekyll/update/2024/03/12/Python%E7%88%AC%E8%99%AB</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/03/12/Python%E7%88%AC%E8%99%AB.html"><![CDATA[<p><strong>背景：</strong></p>

<p><strong>PySpider</strong>：一个国人编写的强大的网络爬虫系统并带有强大的WebUI。采用Python语言编写，分布式架构，支持多种数据库后端，强大的WebUI支持脚本编辑器，任务监视器，项目管理器以及结果查看器。在线示例： <strong>http://demo.pyspider.org/</strong></p>

<p><strong>官方文档： http://docs.pyspider.org/en/latest/</strong></p>

<p><strong>Github :  https://github.com/binux/pyspider</strong></p>

<p>本文爬虫代码 Github 地址：<strong>https://github.com/zhisheng17/Python-Projects/blob/master/v2ex/V2EX.py</strong></p>

<!-- more -->

<hr />

<p>说了这么多，我们还是来看正文吧！</p>

<p><strong>前提:</strong> 你已经安装好了Pyspider 和 MySQL-python（保存数据）</p>

<p>如果你还没安装的话，请看看我的前一篇文章，防止你也走弯路。</p>

<ol>
  <li>
    <p><a href="http://blog.csdn.net/tzs_1041218129/article/details/52877949"><strong>Pyspider 框架学习时走过的一些坑</strong></a></p>
  </li>
  <li>
    <p><a href="http://blog.csdn.net/tzs_1041218129/article/details/52853465"><strong>HTTP 599: SSL certificate problem: unable to get local issuer certificate错误</strong></a></p>
  </li>
</ol>

<p>我所遇到的一些错误：</p>

<p>首先，<strong>本爬虫目标</strong>：使用 Pyspider 框架爬取 <a href="www.v2ex.com">V2EX</a> 网站的帖子中的问题和内容，然后将爬取的数据保存在本地。</p>

<p>V2EX 中大部分的帖子查看是不需要登录的，当然也有些帖子是需要登陆后才能够查看的。（因为后来爬取的时候发现一直 error ，查看具体原因后才知道是需要登录的才可以查看那些帖子的）所以我觉得没必要用到 Cookie，当然如果你非得要登录，那也很简单，简单地方法就是添加你登录后的 cookie 了。</p>

<p>我们在 https://www.v2ex.com/ 扫了一遍，发现并没有一个列表能包含所有的帖子，只能退而求其次，通过抓取分类下的所有的标签列表页，来遍历所有的帖子： https://www.v2ex.com/?tab=tech 然后是 https://www.v2ex.com/go/programmer  最后每个帖子的详情地址是 （举例）： https://www.v2ex.com/t/314683#reply1</p>

<p><strong>创建一个项目</strong></p>

<p>在 pyspider 的 dashboard 的右下角，点击 “Create” 按钮</p>

<p>替换 on_start 函数的 self.crawl 的 URL：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@every</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">on_start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">crawl</span><span class="p">(</span><span class="sh">'</span><span class="s">https://www.v2ex.com/</span><span class="sh">'</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">index_page</span><span class="p">,</span> <span class="n">validate_cert</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <ul>
    <li>self.crawl 告诉 pyspider 抓取指定页面，然后使用 callback 函数对结果进行解析。</li>
    <li>@every) 修饰器，表示 on_start 每天会执行一次，这样就能抓到最新的帖子了。</li>
    <li>validate_cert=False 一定要这样，否则会报 HTTP 599: SSL certificate problem: unable to get local issuer certificate错误</li>
  </ul>
</blockquote>

<p><strong>首页：</strong></p>

<p>点击绿色的 run 执行，你会看到 follows 上面有一个红色的 1，切换到 follows 面板，点击绿色的播放按钮：</p>

<p>第二张截图一开始是出现这个问题了，解决办法看前面写的文章，后来问题就不再会出现了。</p>

<p><br /></p>

<p><strong>Tab列表页:</strong></p>

<p>在 tab 列表页 中，我们需要提取出所有的主题列表页 的 URL。你可能已经发现了，sample handler 已经提取了非常多大的 URL</p>

<p>代码：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@config</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">index_page</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">a[href^=</span><span class="sh">"</span><span class="s">https://www.v2ex.com/?tab=</span><span class="sh">"</span><span class="s">]</span><span class="sh">'</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">crawl</span><span class="p">(</span><span class="n">each</span><span class="p">.</span><span class="n">attr</span><span class="p">.</span><span class="n">href</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">tab_page</span><span class="p">,</span> <span class="n">validate_cert</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <ul>
    <li>由于帖子列表页和 tab列表页长的并不一样，在这里新建了一个 callback 为 self.tab_page</li>
    <li>@config(age=10 * 24 * 60 * 60) 在这表示我们认为 10 天内页面有效，不会再次进行更新抓取</li>
  </ul>
</blockquote>

<p><strong>Go列表页:</strong></p>

<p>代码：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@config</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">tab_page</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">a[href^=</span><span class="sh">"</span><span class="s">https://www.v2ex.com/go/</span><span class="sh">"</span><span class="s">]</span><span class="sh">'</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">crawl</span><span class="p">(</span><span class="n">each</span><span class="p">.</span><span class="n">attr</span><span class="p">.</span><span class="n">href</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">board_page</span><span class="p">,</span> <span class="n">validate_cert</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>帖子详情页（T）:</strong></p>

<p>你可以看到结果里面出现了一些reply的东西，对于这些我们是可以不需要的，我们可以去掉。</p>

<p>同时我们还需要让他自己实现自动翻页功能。</p>

<p>代码：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@config</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">board_page</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">a[href^=</span><span class="sh">"</span><span class="s">https://www.v2ex.com/t/</span><span class="sh">"</span><span class="s">]</span><span class="sh">'</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">url</span> <span class="o">=</span> <span class="n">each</span><span class="p">.</span><span class="n">attr</span><span class="p">.</span><span class="n">href</span>
            <span class="k">if</span> <span class="n">url</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">#reply</span><span class="sh">'</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">url</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">#</span><span class="sh">'</span><span class="p">)]</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">crawl</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">detail_page</span><span class="p">,</span> <span class="n">validate_cert</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">a.page_normal</span><span class="sh">'</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">crawl</span><span class="p">(</span><span class="n">each</span><span class="p">.</span><span class="n">attr</span><span class="p">.</span><span class="n">href</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">board_page</span><span class="p">,</span> <span class="n">validate_cert</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="c1">#实现自动翻页功能
</span></code></pre></div></div>

<p>代码：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@config</span><span class="p">(</span><span class="n">priority</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">detail_page</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">h1</span><span class="sh">'</span><span class="p">).</span><span class="nf">text</span><span class="p">()</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">div.topic_content</span><span class="sh">'</span><span class="p">).</span><span class="nf">html</span><span class="p">().</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'"'</span><span class="p">,</span> <span class="sh">'</span><span class="se">\\</span><span class="sh">"'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">add_question</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>  <span class="c1">#插入数据库
</span>        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">url</span><span class="sh">"</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>插入数据库的话，需要我们在之前定义一个add_question函数。</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#连接数据库
</span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">db</span> <span class="o">=</span> <span class="n">MySQLdb</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="sh">'</span><span class="s">localhost</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">root</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">root</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wenda</span><span class="sh">'</span><span class="p">,</span> <span class="n">charset</span><span class="o">=</span><span class="sh">'</span><span class="s">utf8</span><span class="sh">'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">add_question</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">db</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>
            <span class="n">sql</span> <span class="o">=</span> <span class="sh">'</span><span class="s">insert into question(title, content, user_id, created_date, comment_count) values (</span><span class="sh">"</span><span class="s">%s</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="s">%s</span><span class="sh">"</span><span class="s">,%d, %s, 0)</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="p">,</span> <span class="sh">'</span><span class="s">now()</span><span class="sh">'</span><span class="p">);</span>   <span class="c1">#插入数据库的SQL语句
</span>            <span class="k">print</span> <span class="n">sql</span>
            <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
            <span class="k">print</span> <span class="n">cursor</span><span class="p">.</span><span class="n">lastrowid</span>
            <span class="n">self</span><span class="p">.</span><span class="n">db</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">print</span> <span class="n">e</span>
            <span class="n">self</span><span class="p">.</span><span class="n">db</span><span class="p">.</span><span class="nf">rollback</span><span class="p">()</span>
</code></pre></div></div>

<p>查看爬虫运行结果：</p>

<blockquote>
  <ol>
    <li>先debug下，再调成running。pyspider框架在windows下的bug</li>
    <li>设置跑的速度，建议不要跑的太快，否则很容易被发现是爬虫的，人家就会把你的IP给封掉的</li>
    <li>查看运行工作</li>
    <li>查看爬取下来的内容</li>
  </ol>
</blockquote>

<p>然后再本地数据库GUI软件上查询下就可以看到数据已经保存到本地了。</p>

<p>自己需要用的话就可以导入出来了。</p>

<p>在开头我就告诉大家爬虫的代码了，如果详细的看看那个project，你就会找到我上传的爬取数据了。（仅供学习使用，切勿商用！）</p>

<p>当然你还会看到其他的爬虫代码的了，如果你觉得不错可以给个 Star，或者你也感兴趣的话，你可以fork我的项目，和我一起学习，这个项目长期更新下去。</p>

<p><strong>最后：</strong></p>

<p>代码：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># created by 10412
# !/usr/bin/env python
# -*- encoding: utf-8 -*-
# Created on 2016-10-20 20:43:00
# Project: V2EX
</span>
<span class="kn">from</span> <span class="n">pyspider.libs.base_handler</span> <span class="kn">import</span> <span class="o">*</span>

<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">random</span>
<span class="kn">import</span> <span class="n">MySQLdb</span>

<span class="k">class</span> <span class="nc">Handler</span><span class="p">(</span><span class="n">BaseHandler</span><span class="p">):</span>
    <span class="n">crawl_config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">db</span> <span class="o">=</span> <span class="n">MySQLdb</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="sh">'</span><span class="s">localhost</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">root</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">root</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wenda</span><span class="sh">'</span><span class="p">,</span> <span class="n">charset</span><span class="o">=</span><span class="sh">'</span><span class="s">utf8</span><span class="sh">'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">add_question</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">db</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>
            <span class="n">sql</span> <span class="o">=</span> <span class="sh">'</span><span class="s">insert into question(title, content, user_id, created_date, comment_count) values (</span><span class="sh">"</span><span class="s">%s</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="s">%s</span><span class="sh">"</span><span class="s">,%d, %s, 0)</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="p">,</span> <span class="sh">'</span><span class="s">now()</span><span class="sh">'</span><span class="p">);</span>
            <span class="k">print</span> <span class="n">sql</span>
            <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
            <span class="k">print</span> <span class="n">cursor</span><span class="p">.</span><span class="n">lastrowid</span>
            <span class="n">self</span><span class="p">.</span><span class="n">db</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">print</span> <span class="n">e</span>
            <span class="n">self</span><span class="p">.</span><span class="n">db</span><span class="p">.</span><span class="nf">rollback</span><span class="p">()</span>


    <span class="nd">@every</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">on_start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">crawl</span><span class="p">(</span><span class="sh">'</span><span class="s">https://www.v2ex.com/</span><span class="sh">'</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">index_page</span><span class="p">,</span> <span class="n">validate_cert</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="nd">@config</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">index_page</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">a[href^=</span><span class="sh">"</span><span class="s">https://www.v2ex.com/?tab=</span><span class="sh">"</span><span class="s">]</span><span class="sh">'</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">crawl</span><span class="p">(</span><span class="n">each</span><span class="p">.</span><span class="n">attr</span><span class="p">.</span><span class="n">href</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">tab_page</span><span class="p">,</span> <span class="n">validate_cert</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>


    <span class="nd">@config</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">tab_page</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">a[href^=</span><span class="sh">"</span><span class="s">https://www.v2ex.com/go/</span><span class="sh">"</span><span class="s">]</span><span class="sh">'</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">crawl</span><span class="p">(</span><span class="n">each</span><span class="p">.</span><span class="n">attr</span><span class="p">.</span><span class="n">href</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">board_page</span><span class="p">,</span> <span class="n">validate_cert</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>


    <span class="nd">@config</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">board_page</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">a[href^=</span><span class="sh">"</span><span class="s">https://www.v2ex.com/t/</span><span class="sh">"</span><span class="s">]</span><span class="sh">'</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">url</span> <span class="o">=</span> <span class="n">each</span><span class="p">.</span><span class="n">attr</span><span class="p">.</span><span class="n">href</span>
            <span class="k">if</span> <span class="n">url</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">#reply</span><span class="sh">'</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">url</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">#</span><span class="sh">'</span><span class="p">)]</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">crawl</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">detail_page</span><span class="p">,</span> <span class="n">validate_cert</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">a.page_normal</span><span class="sh">'</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">crawl</span><span class="p">(</span><span class="n">each</span><span class="p">.</span><span class="n">attr</span><span class="p">.</span><span class="n">href</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">board_page</span><span class="p">,</span> <span class="n">validate_cert</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>


    <span class="nd">@config</span><span class="p">(</span><span class="n">priority</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">detail_page</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">h1</span><span class="sh">'</span><span class="p">).</span><span class="nf">text</span><span class="p">()</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">doc</span><span class="p">(</span><span class="sh">'</span><span class="s">div.topic_content</span><span class="sh">'</span><span class="p">).</span><span class="nf">html</span><span class="p">().</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'"'</span><span class="p">,</span> <span class="sh">'</span><span class="se">\\</span><span class="sh">"'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">add_question</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>  <span class="c1">#插入数据库
</span>        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">url</span><span class="sh">"</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span>
        <span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[背景：]]></summary></entry><entry><title type="html">哈希表</title><link href="http://localhost:4000/jekyll/update/2024/03/12/%E5%93%88%E5%B8%8C%E8%A1%A8.html" rel="alternate" type="text/html" title="哈希表" /><published>2024-03-12T12:57:00+08:00</published><updated>2024-03-12T12:57:00+08:00</updated><id>http://localhost:4000/jekyll/update/2024/03/12/%E5%93%88%E5%B8%8C%E8%A1%A8</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/03/12/%E5%93%88%E5%B8%8C%E8%A1%A8.html"><![CDATA[<p>HashMap 和 Hashtable 的比较是 Java 面试中的常见问题，用来考验程序员是否能够正确使用集合类以及是否可以随机应变使用多种思路解决问题。HashMap 的工作原理、ArrayList 与 Vector 的比较以及这个问题是有关 Java 集合框架的最经典的问题。Hashtable 是个过时的集合类，存在于 Java API 中很久了。在 Java 4 中被重写了，实现了 Map 接口，所以自此以后也成了 Java 集合框架中的一部分。Hashtable 和 HashMap 在 Java 面试中相当容易被问到，甚至成为了集合框架面试题中最常被考的问题，所以在参加任何 Java 面试之前，都不要忘了准备这一题。
<!-- more -->
这篇文章中，我们不仅将会看到 HashMap 和 Hashtable 的区别，还将看到它们之间的相似之处。</p>

<h3 id="hashmap-和-hashtable-的区别">HashMap 和 Hashtable 的区别</h3>

<p>HashMap 和 Hashtable 都实现了 Map 接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步 (synchronization)，以及速度。</p>

<ol>
  <li>HashMap 几乎可以等价于 Hashtable，除了 HashMap 是非 synchronized 的，并可以接受 null(HashMap 可以接受为 null 的键值 (key) 和值 (value)，而 Hashtable 则不行)。</li>
  <li>HashMap 是非 synchronized，而 Hashtable 是 synchronized，这意味着 Hashtable 是线程安全的，多个线程可以共享一个 Hashtable；而如果没有正确的同步的话，多个线程是不能共享 HashMap 的。Java 5 提供了 ConcurrentHashMap，它是 HashTable 的替代，比 HashTable 的扩展性更好。</li>
  <li>另一个区别是 HashMap 的迭代器 (Iterator) 是 fail-fast 迭代器，而 Hashtable 的 enumerator 迭代器不是 fail-fast 的。所以当有其它线程改变了 HashMap 的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的 remove() 方法移除元素则不会抛出ConcurrentModificationException 异常。但这并不是一个一定发生的行为，要看 JVM。这条同样也是Enumeration 和 Iterato r的区别。</li>
  <li>由于 Hashtable 是线程安全的也是 synchronized，所以在单线程环境下它比 HashMap 要慢。如果你不需要同步，只需要单一线程，那么使用 HashMap 性能要好过 Hashtable。</li>
  <li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</li>
</ol>

<h3 id="要注意的一些重要术语">要注意的一些重要术语：</h3>

<p>1) sychronized 意味着在一次仅有一个线程能够更改 Hashtable。就是说任何线程要更新 Hashtable 时要首先获得同步锁，其它线程要等到同步锁被释放之后才能再次获得同步锁更新 Hashtable。</p>

<p>2) Fail-safe 和 iterator 迭代器相关。如果某个集合对象创建了 Iterator 或者 ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出 ConcurrentModificationException 异常。但其它线程可以通过 set() 方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用 set() 方法，将会抛出 IllegalArgumentException 异常。</p>

<p>3) 结构上的更改指的是删除或者插入一个元素，这样会影响到 map 的结构。</p>

<h3 id="我们能否让-hashmap-同步">我们能否让 HashMap 同步？</h3>

<p>HashMap 可以通过下面的语句进行同步：
Map m = Collections.synchronizeMap(hashMap);</p>

<h3 id="结论">结论</h3>

<p>Hashtable 和 HashMap 有几个主要的不同：线程安全以及速度。仅在你需要完全的线程安全的时候使用Hashtable，而如果你使用 Java 5 或以上的话，请使用 ConcurrentHashMap 吧。</p>

<p>转载自：<a href="http://www.importnew.com/7010.html">HashMap和Hashtable的区别</a></p>

<hr />

<p>关于 HashMap 线程不安全这一点，《Java并发编程的艺术》一书中是这样说的：</p>

<blockquote>
  <p>HashMap 在并发执行 put 操作时会引起死循环，导致 CPU 利用率接近 100%。因为多线程会导致 HashMap 的 Node 链表形成环形数据结构，一旦形成环形数据结构，Node 的 next 节点永远不为空，就会在获取 Node 时产生死循环。</p>
</blockquote>

<p>原因：</p>

<ul>
  <li><a href="http://coolshell.cn/articles/9606.html">疫苗：JAVA HASHMAP的死循环 —— 酷壳</a></li>
  <li><a href="http://firezhfox.iteye.com/blog/2241043">HashMap在java并发中如何发生死循环</a></li>
  <li><a href="http://coding-geek.com/how-does-a-hashmap-work-in-java/">How does a HashMap work in JAVA</a></li>
</ul>

<hr />

<p>下面的是自己有道云笔记中记录的：</p>

<p><strong>HashMap ， HashTable 和 HashSet 区别</strong></p>

<p>1.  关于 HashMap 的一些说法：</p>

<p>a)  HashMap 实际上是一个“链表散列”的数据结构，即数组和链表的结合体。HashMap 的底层结构是一个数组，数组中的每一项是一条链表。</p>

<p>b)  HashMap 的实例有俩个参数影响其性能： “初始容量” 和 装填因子。</p>

<p>c)  HashMap 实现不同步，线程不安全。  HashTable 线程安全</p>

<p>d)  HashMap 中的 key-value 都是存储在 Entry 中的。</p>

<p>e)  HashMap 可以存 null 键和 null 值，不保证元素的顺序恒久不变，它的底层使用的是数组和链表，通过hashCode() 方法和 equals 方法保证键的唯一性</p>

<p>f)  解决冲突主要有三种方法：定址法，拉链法，再散列法。HashMap 是采用拉链法解决哈希冲突的。</p>

<p>注： 链表法是将相同 hash 值的对象组成一个链表放在 hash 值对应的槽位；</p>

<p>用开放定址法解决冲突的做法是：当冲突发生时，使用某种探查(亦称探测)技术在散列表中形成一个探查(测)序列。 沿此序列逐个单元地查找，直到找到给定 的关键字，或者碰到一个开放的地址(即该地址单元为空)为止（若要插入，在探查到开放的地址，则可将待插入的新结点存人该地址单元）。</p>

<p>拉链法解决冲突的做法是： 将所有关键字为同义词的结点链接在同一个单链表中 。若选定的散列表长度为m，则可将散列表定义为一个由m个头指针组成的指针数 组T[0..m-1]。凡是散列地址为i的结点，均插入到以T[i]为头指针的单链表中。T中各分量的初值均应为空指针。在拉链法中，装填因子α可以大于1，但一般均取α≤1。拉链法适合未规定元素的大小。</p>

<p>   </p>

<p>2.  Hashtable 和 HashMap 的区别：</p>

<p>a)   继承不同。</p>

<p>public class Hashtable extends Dictionary implements Map</p>

<p>public class HashMap extends  AbstractMap implements Map</p>

<p>b)  Hashtable 中的方法是同步的，而 HashMap 中的方法在缺省情况下是非同步的。在多线程并发的环境下，可以直接使用 Hashtable，但是要使用 HashMap 的话就要自己增加同步处理了。</p>

<p>c)  Hashtable 中， key 和 value 都不允许出现 null 值。 在 HashMap 中， null 可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为 null 。当 get() 方法返回 null 值时，即可以表示 HashMap 中没有该键，也可以表示该键所对应的值为 null 。因此，在 HashMap 中不能由 get() 方法来判断 HashMap 中是否存在某个键， 而应该用 containsKey() 方法来判断。</p>

<p>d)  两个遍历方式的内部实现上不同。Hashtable、HashMap 都使用了Iterator。而由于历史原因，Hashtable还使用了 Enumeration 的方式 。</p>

<p>e)  哈希值的使用不同，HashTable 直接使用对象的 hashCode。而 HashMap 重新计算 hash 值。</p>

<p>f)  Hashtable 和 HashMap 它们两个内部实现方式的数组的初始大小和扩容的方式。HashTable 中 hash 数组默认大小是11，增加的方式是 old*2+1。HashMap 中 hash 数组的默认大小是 16，而且一定是2的指数。</p>

<p>注：  HashSet 子类依靠 hashCode() 和 equal() 方法来区分重复元素。</p>

<p>HashSet 内部使用 Map 保存数据，即将 HashSet 的数据作为 Map 的 key 值保存，这也是 HashSet 中元素不能重复的原因。而 Map 中保存 key 值的,会去判断当前 Map 中是否含有该 Key 对象，内部是先通过 key 的hashCode, 确定有相同的 hashCode 之后，再通过 equals 方法判断是否相同。</p>

<hr />

<p>《HashMap 的工作原理》</p>

<p>HashMap的工作原理是近年来常见的Java面试题。几乎每个Java程序员都知道HashMap，都知道哪里要用HashMap，知道 Hashtable和HashMap之间的区别，那么为何这道面试题如此特殊呢？是因为这道题考察的深度很深。这题经常出现在高级或中高级面试中。投资银行更喜欢问这个问题，甚至会要求你实现HashMap来考察你的编程能力。ConcurrentHashMap和其它同步集合的引入让这道题变得更加复杂。让我们开始探索的旅程吧！</p>

<h3 id="先来些简单的问题">先来些简单的问题</h3>

<p><strong>“你用过HashMap吗？” “什么是HashMap？你为什么用到它？”</strong></p>

<p>几乎每个人都会回答“是的”，然后回答HashMap的一些特性，譬如HashMap可以接受null键值和值，而Hashtable则不能；HashMap是非synchronized;HashMap很快；以及HashMap储存的是键值对等等。这显示出你已经用过HashMap，而且对它相当的熟悉。但是面试官来个急转直下，从此刻开始问出一些刁钻的问题，关于HashMap的更多基础的细节。面试官可能会问出下面的问题：</p>

<p><strong>“你知道HashMap的工作原理吗？” “你知道HashMap的get()方法的工作原理吗？”</strong></p>

<p>你也许会回答“我没有详查标准的Java API，你可以看看Java源代码或者Open JDK。”“我可以用Google找到答案。”</p>

<p>但一些面试者可能可以给出答案，“HashMap是基于hashing的原理，我们使用put(key, value)存储对象到HashMap中，使用get(key)从HashMap中获取对象。当我们给put()方法传递键和值时，我们先对键调用hashCode()方法，返回的hashCode用于找到bucket位置来储存Entry对象。”这里关键点在于指出，HashMap是在bucket中储存键对象和值对象，作为Map.Entry。这一点有助于理解获取对象的逻辑。如果你没有意识到这一点，或者错误的认为仅仅只在bucket中存储值的话，你将不会回答如何从HashMap中获取对象的逻辑。这个答案相当的正确，也显示出面试者确实知道hashing以及HashMap的工作原理。但是这仅仅是故事的开始，当面试官加入一些Java程序员每天要碰到的实际场景的时候，错误的答案频现。下个问题可能是关于HashMap中的碰撞探测(collision detection)以及碰撞的解决方法：</p>

<p><strong>“当两个对象的hashcode相同会发生什么？”</strong> </p>

<p>从这里开始，真正的困惑开始了，一些面试者会回答因为hashcode相同，所以两个对象是相等的，HashMap将会抛出异常，或者不会存储它们。然后面试官可能会提醒他们有equals()和hashCode()两个方法，并告诉他们两个对象就算hashcode相同，但是它们可能并不相等。一些面试者可能就此放弃，而另外一些还能继续挺进，他们回答“因为hashcode相同，所以它们的bucket位置相同，‘碰撞’会发生。因为HashMap使用链表存储对象，这个Entry(包含有键值对的Map.Entry对象)会存储在链表中。”这个答案非常的合理，虽然有很多种处理碰撞的方法，这种方法是最简单的，也正是HashMap的处理方法。但故事还没有完结，面试官会继续问：</p>

<p><strong>“如果两个键的hashcode相同，你如何获取值对象？”</strong></p>

<p> 面试者会回答：当我们调用get()方法，HashMap会使用键对象的hashcode找到bucket位置，然后获取值对象。面试官提醒他如果有两个值对象储存在同一个bucket，他给出答案:将会遍历链表直到找到值对象。面试官会问因为你并没有值对象去比较，你是如何确定确定找到值对象的？除非面试者直到HashMap在链表中存储的是键值对，否则他们不可能回答出这一题。</p>

<p>其中一些记得这个重要知识点的面试者会说，找到bucket位置之后，会调用keys.equals()方法去找到链表中正确的节点，最终找到要找的值对象。完美的答案！</p>

<p>许多情况下，面试者会在这个环节中出错，因为他们混淆了hashCode()和equals()方法。因为在此之前hashCode()屡屡出现，而equals()方法仅仅在获取值对象的时候才出现。一些优秀的开发者会指出使用不可变的、声明作final的对象，并且采用合适的equals()和hashCode()方法的话，将会减少碰撞的发生，提高效率。不可变性使得能够缓存不同键的hashcode，这将提高整个获取对象的速度，使用String，Interger这样的wrapper类作为键是非常好的选择。</p>

<p>如果你认为到这里已经完结了，那么听到下面这个问题的时候，你会大吃一惊。</p>

<p><strong>“如果HashMap的大小超过了负载因子(load factor)定义的容量，怎么办？”</strong></p>

<p>除非你真正知道HashMap的工作原理，否则你将回答不出这道题。默认的负载因子大小为0.75，也就是说，当一个map填满了75%的bucket时候，和其它集合类(如ArrayList等)一样，将会创建原来HashMap大小的两倍的bucket数组，来重新调整map的大小，并将原来的对象放入新的bucket数组中。这个过程叫作rehashing，因为它调用hash方法找到新的bucket位置。</p>

<p>如果你能够回答这道问题，下面的问题来了：</p>

<p><strong>“你了解重新调整HashMap大小存在什么问题吗？”</strong></p>

<p>你可能回答不上来，这时面试官会提醒你当多线程的情况下，可能产生条件竞争(race condition)。</p>

<p>当重新调整HashMap大小的时候，确实存在条件竞争，因为如果两个线程都发现HashMap需要重新调整大小了，它们会同时试着调整大小。在调整大小的过程中，存储在链表中的元素的次序会反过来，因为移动到新的bucket位置的时候，HashMap并不会将元素放在链表的尾部，而是放在头部，这是为了避免尾部遍历(tail traversing)。如果条件竞争发生了，那么就死循环了。这个时候，你可以质问面试官，为什么这么奇怪，要在多线程的环境下使用HashMap呢？：）</p>

<p>热心的读者贡献了更多的关于HashMap的问题：</p>

<ol>
  <li>
    <p><strong>为什么String, Interger这样的wrapper类适合作为键？</strong> </p>

    <p>String, Interger这样的wrapper类作为HashMap的键是再适合不过了，而且String最为常用。因为String是不可变的，也是final的，而且已经重写了equals()和hashCode()方法了。其他的wrapper类也有这个特点。不可变性是必要的，因为为了要计算hashCode()，就要防止键值改变，如果键值在放入时和获取时返回不同的hashcode的话，那么就不能从HashMap中找到你想要的对象。不可变性还有其他的优点如线程安全。如果你可以仅仅通过将某个field声明成final就能保证hashCode是不变的，那么请这么做吧。因为获取对象的时候要用到equals()和hashCode()方法，那么键对象正确的重写这两个方法是非常重要的。如果两个不相等的对象返回不同的hashcode的话，那么碰撞的几率就会小些，这样就能提高HashMap的性能。</p>
  </li>
  <li>
    <p><strong>我们可以使用自定义的对象作为键吗？</strong> </p>

    <p>这是前一个问题的延伸。当然你可能使用任何对象作为键，只要它遵守了equals()和hashCode()方法的定义规则，并且当对象插入到Map中之后将不会再改变了。如果这个自定义对象时不可变的，那么它已经满足了作为键的条件，因为当它创建之后就已经不能改变了。</p>
  </li>
  <li>
    <p><strong>我们可以使用CocurrentHashMap来代替Hashtable吗？</strong></p>

    <p>这是另外一个很热门的面试题，因为ConcurrentHashMap越来越多人用了。我们知道Hashtable是synchronized的，但是ConcurrentHashMap同步性能更好，因为它仅仅根据同步级别对map的一部分进行上锁。ConcurrentHashMap当然可以代替HashTable，但是HashTable提供更强的线程安全性。看看 <a href="http://javarevisited.blogspot.sg/2011/04/difference-between-concurrenthashmap.html">这篇博客</a> 查看Hashtable和ConcurrentHashMap的区别。</p>
  </li>
</ol>

<p>我个人很喜欢这个问题，因为这个问题的深度和广度，也不直接的涉及到不同的概念。让我们再来看看这些问题设计哪些知识点：</p>

<ul>
  <li>hashing的概念</li>
  <li>HashMap中解决碰撞的方法</li>
  <li>equals()和hashCode()的应用，以及它们在HashMap中的重要性</li>
  <li>不可变对象的好处</li>
  <li>HashMap多线程的条件竞争</li>
  <li>重新调整HashMap的大小</li>
</ul>

<h3 id="总结">总结</h3>

<h4 id="hashmap的工作原理">HashMap的工作原理</h4>

<p>HashMap基于hashing原理，我们通过put()和get()方法储存和获取对象。当我们将键值对传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，让后找到bucket位置来储存值对象。当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。HashMap使用链表来解决碰撞问题，当发生碰撞了，对象将会储存在链表的下一个节点中。 HashMap在每个链表节点中储存键值对对象。</p>

<p>当两个不同的键对象的hashcode相同时会发生什么？ 它们会储存在同一个bucket位置的链表中。键对象的equals()方法用来找到键值对。</p>

<p>因为HashMap的好处非常多，我曾经在电子商务的应用中使用HashMap作为缓存。因为金融领域非常多的运用Java，也出于性能的考虑，我们会经常用到HashMap和ConcurrentHashMap。你可以查看更多的关于HashMap的文章:</p>

<ul>
  <li><a href="http://www.importnew.com/7010.html">HashMap和Hashtable的区别</a></li>
  <li><a href="http://www.importnew.com/6931.html">HashMap和HashSet的区别</a></li>
</ul>

<p>转载自：<a href="http://www.importnew.com/7099.html">HashMap的工作原理</a></p>

<hr />

<p>其他的 HashMap 学习资料：</p>

<ul>
  <li><a href="https://segmentfault.com/a/1190000003617333">jdk7中HashMap知识点整理</a></li>
  <li><a href="http://blog.csdn.net/q291611265/article/details/46797557">HashMap源码分析（四）put-jdk8-红黑树的引入</a></li>
  <li><a href="https://my.oschina.net/hosee/blog/618953">JDK7与JDK8中HashMap的实现</a></li>
  <li><a href="https://wenku.baidu.com/view/6e1035943968011ca30091cd.html">JDK1.8HashMap原理和源码分析(java面试收藏)</a></li>
  <li><a href="http://www.jianshu.com/p/e694f1e868ec">谈谈ConcurrentHashMap1.7和1.8的不同实现</a></li>
  <li><a href="https://my.oschina.net/pingpangkuangmo/blog/817973">jdk1.8的HashMap和ConcurrentHashMap</a></li>
  <li><a href="http://blog.csdn.net/u010723709/article/details/48007881">ConcurrentHashMap源码分析（JDK8版本）</a></li>
</ul>

<hr />

<h3 id="最后">最后</h3>

<p>谢谢阅读，如果可以的话欢迎大家转发和点赞。如需转载注明<a href="www.54tianzhisheng.cn/2017/06/10/HashMap-Hashtable/">原地址</a>就行。</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[HashMap 和 Hashtable 的比较是 Java 面试中的常见问题，用来考验程序员是否能够正确使用集合类以及是否可以随机应变使用多种思路解决问题。HashMap 的工作原理、ArrayList 与 Vector 的比较以及这个问题是有关 Java 集合框架的最经典的问题。Hashtable 是个过时的集合类，存在于 Java API 中很久了。在 Java 4 中被重写了，实现了 Map 接口，所以自此以后也成了 Java 集合框架中的一部分。Hashtable 和 HashMap 在 Java 面试中相当容易被问到，甚至成为了集合框架面试题中最常被考的问题，所以在参加任何 Java 面试之前，都不要忘了准备这一题。 这篇文章中，我们不仅将会看到 HashMap 和 Hashtable 的区别，还将看到它们之间的相似之处。]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/03/12/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-03-12T12:56:00+08:00</published><updated>2024-03-12T12:56:00+08:00</updated><id>http://localhost:4000/jekyll/update/2024/03/12/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/03/12/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>